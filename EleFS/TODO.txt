* File crypto version - Extend the mirror example
	Salt for filename, in hex, then '_', then hex compressed and encrypted filename
	Use long key, 256 bytes?, based on key plus salt for each file, use file position eor file position shifted based on key size, to use for each byte eor
		Pass-through all reads and writes using byte eor
	Advantages, uses underlying file caching and doesn't have complexities of container file based
	* Test: EleFS2\RunTest.bat
	* File contents encrption works: EleFS2ReadFile and EleFS2WriteFile using EncryptDecryptBuffer
	* Done: Encrypt file and directory names
		Filename is going to need salt
		EleFS2FindFiles
		Perhaps a good place to start would be applying crypto to the path calculated by: GetFilePath ?
			Be careful of UNC network paths?
			Might need to validate each part is a file or directory?
		FillFindData -> findData.cFileName contains "." or ".." or a single filename or directory name, perfect for de-encrypting and getting a salt value from
			Perhaps _DOKAN_FILE_INFO->Context can be used for the salt found in the filename?
				Darn, it looks like it is used "->Context" for the real file handle
			Plan B, means GetFilePath will need to do some scanning of files, decrypt them, file the right information and salt
				This is because a salted filename will constantly change and needs intensive scanning to find
					Which would be slow
				Could use an internal cache of the path?
	* Done: Rename needs to preserve the used salt from the previous file name (since it's used in the data) to the new target name, hmm :)
	* Seems to all work, however directory name length is an issue since hex encoding is not efficient...
		EleFS2.exe has triggered a breakpoint. occurred
		wcsncat_s(filePath, numberOfElements, FileName, wcslen(FileName));
			From: GetFilePath(filePath, DOKAN_MAX_PATH, FileName , theSalt);
		Usng "#define WIN10_ENABLE_LONG_PATH" doesn't seem to fix the issue entierly. RunTest.bat reports:
			Only in c:\ReplicaNet\ReplicaNetPublic\Includes/RNLobby/Inc: AdvertiseClient.h
			Only in c:\ReplicaNet\ReplicaNetPublic\Includes/RNLobby/Inc: AdvertiseServer.h
			Only in c:\ReplicaNet\ReplicaNetPublic\Includes/RNLobby/Inc: BaseTransportServer.h
			... etc ...
		Which implies that a create file, or filename parsing is going wrong somewhere?
		* Reducing the header length helps a lot, but still it's quite limited...
		* Obviously using something better than hex will help...
			* TODO: Test the mirror sample, see if WIN10_ENABLE_LONG_PATH really works with very long copy paths
			* TODO: Try base64
			* TODO: Try compression? :)
	* TODO: Caching: GetFilePath() return theSalt and the "filePath" from the "FileName" key, to avoid all the expensive lookups for salt calculation and only when "saltSet = false"
		If the saltSet = true then obviously we want to run the expensive code to set the salt properly for the new directory/filename
	* Done: Reduce to just salt, don't need length





* Striped crypto mode. Block size is multiplied by stripes. Offset within stripe. Blocks filled with random data.
	Extent not reduced of course. New blocks will have to extend.
	Obvious place would be to add this functionality to FileCrypto
		This would need to include file pointer massaging hooks for:
			SetFilePointerEx
			SetEndOfFile
			GetFileSizeEx
		These would need to accept/return suitable values based on the stripe settings.




* Enabling encryption causes corruption? Investigate why.
	Or does corruption happen without encryption, but just less often?




* Might want to use CommutativeEncryptBytewise() for byte wise support instead of the 32 bit chunked crypto?




* Expand the tests so that a new file system is mounted
	* Files copied into it from multiple processes (use bat files)
	* The resultant files verified
	* Unmounted
	* Remounted
	* The resultant files verified again




* Implement storage of extra file information as a generic text field in EleFS. This is to be used for file security tokens.




* Implement MirrorSetFileSecurity/MirrorGetFileSecurity using the file generic text field.
	The root of the file system, when queried, can use the file's security token.
	Remember to add the option FILE_PERSISTENT_ACLS




* // MPi: TODO: Handle the corrupt block



* // MPi: TODO: Look for a better alternative to ERROR_NO_MORE_ITEMS
