* Striped crypto mode. Block size is multiplied by stripes. Offset within stripe. Blocks filled with random data.
	Extent not reduced of course. New blocks will have to extend.
	Obvious place would be to add this functionality to FileCrypto
		This would need to include file pointer massaging hooks for:
			SetFilePointerEx
			SetEndOfFile
			GetFileSizeEx
		These would need to accept/return suitable values based on the stripe settings.




* Enabling encryption causes corruption? Investigate why.
	Or does corruption happen without encryption, but just less often?




* Might want to use CommutativeEncryptBytewise() for byte wise support instead of the 32 bit chunked crypto?




* Expand the tests so that a new file system is mounted
	* Files copied into it from multiple processes (use bat files)
	* The resultant files verified
	* Unmounted
	* Remounted
	* The resultant files verified again




* Implement storage of extra file information as a generic text field in EleFS. This is to be used for file security tokens.




* Implement MirrorSetFileSecurity/MirrorGetFileSecurity using the file generic text field.
	The root of the file system, when queried, can use the file's security token.
	Remember to add the option FILE_PERSISTENT_ACLS




* // MPi: TODO: Handle the corrupt block



* // MPi: TODO: Look for a better alternative to ERROR_NO_MORE_ITEMS
